import { OnChanges, OnInit, EventEmitter, ExistingProvider, ElementRef, Renderer2, AfterViewInit, SimpleChanges, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { SelectDropdownComponent } from './select-dropdown.component';
import { IOption } from './option-interface';
import { Option } from './option';
import { OptionList } from './option-list';
import * as ɵngcc0 from '@angular/core';
export declare const SELECT_VALUE_ACCESSOR: ExistingProvider;
export declare class SelectComponent implements ControlValueAccessor, OnChanges, OnInit, AfterViewInit {
    el: ElementRef;
    renderer: Renderer2;
    private document;
    private cdRef;
    options: Array<IOption>;
    customClass: string;
    allowClear: boolean;
    disabled: boolean;
    highlightColor: string;
    highlightTextColor: string;
    highlightFirst: boolean;
    multiple: boolean;
    noFilter: number;
    notFoundMsg: string;
    placeholder: string;
    filterPlaceholder: string;
    label: string;
    filterEnabled: boolean;
    filterAutocomplete: boolean;
    visibleOptions: number;
    optionHeight: number;
    tabindex: number;
    enableSelectAll: boolean;
    appendToBody: boolean;
    selectAllLabel: string;
    outline: boolean;
    required: boolean;
    private _required;
    compareWith: (o1: any, o2: any) => boolean;
    opened: EventEmitter<any>;
    closed: EventEmitter<any>;
    selected: EventEmitter<IOption>;
    deselected: EventEmitter<IOption | IOption[]>;
    noOptionsFound: EventEmitter<string>;
    changed: EventEmitter<{}>;
    selectionSpan: ElementRef;
    dropdown: SelectDropdownComponent;
    filterInput: ElementRef;
    clearButton: ElementRef;
    singleContainer: ElementRef;
    multipleContainer: ElementRef;
    _value: Array<any>;
    optionList: OptionList;
    optionsLength: number;
    visibleOptionsDefault: number;
    hasSelected: boolean;
    isBrowser: boolean;
    canOpenOnFocus: boolean;
    hasFocus: boolean;
    isOpen: boolean;
    isBelow: boolean;
    filterInputWidth: number;
    isDisabled: boolean;
    placeholderView: string;
    labelActive: boolean;
    labelRef: HTMLElement;
    prefixRef: HTMLElement;
    labelRefActive: boolean;
    dropdownAnimationDone: boolean;
    clearClicked: boolean;
    selectContainerClicked: boolean;
    filterHeight: number;
    dropdownHeight: number;
    dropdownMaxHeight: number;
    OUTLINE_DROPDOWN_BOTTOM_OFFSET: number;
    OUTLINE_DROPDOWN_TOP_OFFSET: number;
    width: number;
    top: number;
    left: number;
    documentClickFun: Function;
    itemsBefore: Array<any>;
    readonly focused: boolean;
    private _focused;
    onChange: (_: any) => void;
    onTouched: () => void;
    private _compareWith;
    constructor(el: ElementRef, renderer: Renderer2, document: any, platformId: string, cdRef: ChangeDetectorRef);
    ngOnInit(): void;
    private _getLabelRef;
    private _getPrefixRef;
    updateFilterHeight(): void;
    updateDropdownHeight(): void;
    onDropdownAnimationDone(): void;
    onDropdownAnimationStart(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    isChild(elemnt: any): boolean;
    onWindowResize(): void;
    onSelectContainerClick(event: any): false | undefined;
    onSelectContainerFocus(): void;
    onSelectContainerBlur(): void;
    onSelectContainerKeydown(event: any): void;
    onDropdownOptionClicked(option: Option): void;
    onDropdownClose(focus: any): void;
    onSingleFilterClick(): void;
    onSingleFilterInput(term: string): void;
    onSingleFilterKeydown(event: any): void;
    onMultipleFilterInput(event: any): void;
    onMultipleFilterKeydown(event: any): void;
    onClearSelectionClick(event: any): void;
    onDeselectOptionClick(option: Option): void;
    /** API. **/
    open(): void;
    close(): void;
    value: any | any[];
    private _setSelection;
    private _selectByValue;
    clear(): void;
    select(value: string): void;
    /** ControlValueAccessor interface methods. **/
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    valueChanged(): void;
    updateState(): void;
    /** Initialization. **/
    updateOptionsList(options: Array<IOption>): void;
    updateLabelState(): void;
    updateLabelRefState(): void;
    /** Dropdown. **/
    toggleDropdown(): void;
    openDropdown(): void;
    closeDropdown(focus?: boolean): void;
    /** Select. **/
    selectOption(option: Option): void;
    deselectOption(option: Option): void;
    clearSelection(): void;
    toggleSelectOption(option: Option): void;
    selectHighlightedOption(): void;
    deselectLast(): void;
    onSelectAll(isSelected: boolean): void;
    /** Filter. **/
    clearFilterInput(): void;
    setMultipleFilterInput(value: string): void;
    handleSelectContainerKeydown(event: any): void;
    handleMultipleFilterKeydown(event: any): void;
    handleSingleFilterKeydown(event: any): void;
    /** View. **/
    focus(): void;
    blur(): void;
    updateWidth(): void;
    updatePosition(): void;
    private _updateAppendedPosition;
    private _appendDropdown;
    updateFilterWidth(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SelectComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SelectComponent, "mdb-select", never, { "customClass": "customClass"; "allowClear": "allowClear"; "disabled": "disabled"; "highlightFirst": "highlightFirst"; "multiple": "multiple"; "noFilter": "noFilter"; "notFoundMsg": "notFoundMsg"; "placeholder": "placeholder"; "filterPlaceholder": "filterPlaceholder"; "label": "label"; "filterEnabled": "filterEnabled"; "filterAutocomplete": "filterAutocomplete"; "optionHeight": "optionHeight"; "enableSelectAll": "enableSelectAll"; "selectAllLabel": "selectAllLabel"; "outline": "outline"; "required": "required"; "compareWith": "compareWith"; "options": "options"; "highlightColor": "highlightColor"; "highlightTextColor": "highlightTextColor"; "visibleOptions": "visibleOptions"; "tabindex": "tabindex"; "appendToBody": "appendToBody"; }, { "opened": "opened"; "closed": "closed"; "selected": "selected"; "deselected": "deselected"; "noOptionsFound": "noOptionsFound"; "changed": "changed"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJzZWxlY3QuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFNQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0pBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25DaGFuZ2VzLCBPbkluaXQsIEV2ZW50RW1pdHRlciwgRXhpc3RpbmdQcm92aWRlciwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBBZnRlclZpZXdJbml0LCBTaW1wbGVDaGFuZ2VzLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBTZWxlY3REcm9wZG93bkNvbXBvbmVudCB9IGZyb20gJy4vc2VsZWN0LWRyb3Bkb3duLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJT3B0aW9uIH0gZnJvbSAnLi9vcHRpb24taW50ZXJmYWNlJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJy4vb3B0aW9uJztcbmltcG9ydCB7IE9wdGlvbkxpc3QgfSBmcm9tICcuL29wdGlvbi1saXN0JztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFNFTEVDVF9WQUxVRV9BQ0NFU1NPUjogRXhpc3RpbmdQcm92aWRlcjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNlbGVjdENvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkNoYW5nZXMsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgZWw6IEVsZW1lbnRSZWY7XG4gICAgcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgICBwcml2YXRlIGRvY3VtZW50O1xuICAgIHByaXZhdGUgY2RSZWY7XG4gICAgb3B0aW9uczogQXJyYXk8SU9wdGlvbj47XG4gICAgY3VzdG9tQ2xhc3M6IHN0cmluZztcbiAgICBhbGxvd0NsZWFyOiBib29sZWFuO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIGhpZ2hsaWdodENvbG9yOiBzdHJpbmc7XG4gICAgaGlnaGxpZ2h0VGV4dENvbG9yOiBzdHJpbmc7XG4gICAgaGlnaGxpZ2h0Rmlyc3Q6IGJvb2xlYW47XG4gICAgbXVsdGlwbGU6IGJvb2xlYW47XG4gICAgbm9GaWx0ZXI6IG51bWJlcjtcbiAgICBub3RGb3VuZE1zZzogc3RyaW5nO1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgZmlsdGVyUGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIGZpbHRlckVuYWJsZWQ6IGJvb2xlYW47XG4gICAgZmlsdGVyQXV0b2NvbXBsZXRlOiBib29sZWFuO1xuICAgIHZpc2libGVPcHRpb25zOiBudW1iZXI7XG4gICAgb3B0aW9uSGVpZ2h0OiBudW1iZXI7XG4gICAgdGFiaW5kZXg6IG51bWJlcjtcbiAgICBlbmFibGVTZWxlY3RBbGw6IGJvb2xlYW47XG4gICAgYXBwZW5kVG9Cb2R5OiBib29sZWFuO1xuICAgIHNlbGVjdEFsbExhYmVsOiBzdHJpbmc7XG4gICAgb3V0bGluZTogYm9vbGVhbjtcbiAgICByZXF1aXJlZDogYm9vbGVhbjtcbiAgICBwcml2YXRlIF9yZXF1aXJlZDtcbiAgICBjb21wYXJlV2l0aDogKG8xOiBhbnksIG8yOiBhbnkpID0+IGJvb2xlYW47XG4gICAgb3BlbmVkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjbG9zZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8SU9wdGlvbj47XG4gICAgZGVzZWxlY3RlZDogRXZlbnRFbWl0dGVyPElPcHRpb24gfCBJT3B0aW9uW10+O1xuICAgIG5vT3B0aW9uc0ZvdW5kOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICBjaGFuZ2VkOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIHNlbGVjdGlvblNwYW46IEVsZW1lbnRSZWY7XG4gICAgZHJvcGRvd246IFNlbGVjdERyb3Bkb3duQ29tcG9uZW50O1xuICAgIGZpbHRlcklucHV0OiBFbGVtZW50UmVmO1xuICAgIGNsZWFyQnV0dG9uOiBFbGVtZW50UmVmO1xuICAgIHNpbmdsZUNvbnRhaW5lcjogRWxlbWVudFJlZjtcbiAgICBtdWx0aXBsZUNvbnRhaW5lcjogRWxlbWVudFJlZjtcbiAgICBfdmFsdWU6IEFycmF5PGFueT47XG4gICAgb3B0aW9uTGlzdDogT3B0aW9uTGlzdDtcbiAgICBvcHRpb25zTGVuZ3RoOiBudW1iZXI7XG4gICAgdmlzaWJsZU9wdGlvbnNEZWZhdWx0OiBudW1iZXI7XG4gICAgaGFzU2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgaXNCcm93c2VyOiBib29sZWFuO1xuICAgIGNhbk9wZW5PbkZvY3VzOiBib29sZWFuO1xuICAgIGhhc0ZvY3VzOiBib29sZWFuO1xuICAgIGlzT3BlbjogYm9vbGVhbjtcbiAgICBpc0JlbG93OiBib29sZWFuO1xuICAgIGZpbHRlcklucHV0V2lkdGg6IG51bWJlcjtcbiAgICBpc0Rpc2FibGVkOiBib29sZWFuO1xuICAgIHBsYWNlaG9sZGVyVmlldzogc3RyaW5nO1xuICAgIGxhYmVsQWN0aXZlOiBib29sZWFuO1xuICAgIGxhYmVsUmVmOiBIVE1MRWxlbWVudDtcbiAgICBwcmVmaXhSZWY6IEhUTUxFbGVtZW50O1xuICAgIGxhYmVsUmVmQWN0aXZlOiBib29sZWFuO1xuICAgIGRyb3Bkb3duQW5pbWF0aW9uRG9uZTogYm9vbGVhbjtcbiAgICBjbGVhckNsaWNrZWQ6IGJvb2xlYW47XG4gICAgc2VsZWN0Q29udGFpbmVyQ2xpY2tlZDogYm9vbGVhbjtcbiAgICBmaWx0ZXJIZWlnaHQ6IG51bWJlcjtcbiAgICBkcm9wZG93bkhlaWdodDogbnVtYmVyO1xuICAgIGRyb3Bkb3duTWF4SGVpZ2h0OiBudW1iZXI7XG4gICAgT1VUTElORV9EUk9QRE9XTl9CT1RUT01fT0ZGU0VUOiBudW1iZXI7XG4gICAgT1VUTElORV9EUk9QRE9XTl9UT1BfT0ZGU0VUOiBudW1iZXI7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICB0b3A6IG51bWJlcjtcbiAgICBsZWZ0OiBudW1iZXI7XG4gICAgZG9jdW1lbnRDbGlja0Z1bjogRnVuY3Rpb247XG4gICAgaXRlbXNCZWZvcmU6IEFycmF5PGFueT47XG4gICAgcmVhZG9ubHkgZm9jdXNlZDogYm9vbGVhbjtcbiAgICBwcml2YXRlIF9mb2N1c2VkO1xuICAgIG9uQ2hhbmdlOiAoXzogYW55KSA9PiB2b2lkO1xuICAgIG9uVG91Y2hlZDogKCkgPT4gdm9pZDtcbiAgICBwcml2YXRlIF9jb21wYXJlV2l0aDtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgZG9jdW1lbnQ6IGFueSwgcGxhdGZvcm1JZDogc3RyaW5nLCBjZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfZ2V0TGFiZWxSZWY7XG4gICAgcHJpdmF0ZSBfZ2V0UHJlZml4UmVmO1xuICAgIHVwZGF0ZUZpbHRlckhlaWdodCgpOiB2b2lkO1xuICAgIHVwZGF0ZURyb3Bkb3duSGVpZ2h0KCk6IHZvaWQ7XG4gICAgb25Ecm9wZG93bkFuaW1hdGlvbkRvbmUoKTogdm9pZDtcbiAgICBvbkRyb3Bkb3duQW5pbWF0aW9uU3RhcnQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBpc0NoaWxkKGVsZW1udDogYW55KTogYm9vbGVhbjtcbiAgICBvbldpbmRvd1Jlc2l6ZSgpOiB2b2lkO1xuICAgIG9uU2VsZWN0Q29udGFpbmVyQ2xpY2soZXZlbnQ6IGFueSk6IGZhbHNlIHwgdW5kZWZpbmVkO1xuICAgIG9uU2VsZWN0Q29udGFpbmVyRm9jdXMoKTogdm9pZDtcbiAgICBvblNlbGVjdENvbnRhaW5lckJsdXIoKTogdm9pZDtcbiAgICBvblNlbGVjdENvbnRhaW5lcktleWRvd24oZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25Ecm9wZG93bk9wdGlvbkNsaWNrZWQob3B0aW9uOiBPcHRpb24pOiB2b2lkO1xuICAgIG9uRHJvcGRvd25DbG9zZShmb2N1czogYW55KTogdm9pZDtcbiAgICBvblNpbmdsZUZpbHRlckNsaWNrKCk6IHZvaWQ7XG4gICAgb25TaW5nbGVGaWx0ZXJJbnB1dCh0ZXJtOiBzdHJpbmcpOiB2b2lkO1xuICAgIG9uU2luZ2xlRmlsdGVyS2V5ZG93bihldmVudDogYW55KTogdm9pZDtcbiAgICBvbk11bHRpcGxlRmlsdGVySW5wdXQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25NdWx0aXBsZUZpbHRlcktleWRvd24oZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25DbGVhclNlbGVjdGlvbkNsaWNrKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uRGVzZWxlY3RPcHRpb25DbGljayhvcHRpb246IE9wdGlvbik6IHZvaWQ7XG4gICAgLyoqIEFQSS4gKiovXG4gICAgb3BlbigpOiB2b2lkO1xuICAgIGNsb3NlKCk6IHZvaWQ7XG4gICAgdmFsdWU6IGFueSB8IGFueVtdO1xuICAgIHByaXZhdGUgX3NldFNlbGVjdGlvbjtcbiAgICBwcml2YXRlIF9zZWxlY3RCeVZhbHVlO1xuICAgIGNsZWFyKCk6IHZvaWQ7XG4gICAgc2VsZWN0KHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKiBDb250cm9sVmFsdWVBY2Nlc3NvciBpbnRlcmZhY2UgbWV0aG9kcy4gKiovXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogYW55KSA9PiB2b2lkKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICB2YWx1ZUNoYW5nZWQoKTogdm9pZDtcbiAgICB1cGRhdGVTdGF0ZSgpOiB2b2lkO1xuICAgIC8qKiBJbml0aWFsaXphdGlvbi4gKiovXG4gICAgdXBkYXRlT3B0aW9uc0xpc3Qob3B0aW9uczogQXJyYXk8SU9wdGlvbj4pOiB2b2lkO1xuICAgIHVwZGF0ZUxhYmVsU3RhdGUoKTogdm9pZDtcbiAgICB1cGRhdGVMYWJlbFJlZlN0YXRlKCk6IHZvaWQ7XG4gICAgLyoqIERyb3Bkb3duLiAqKi9cbiAgICB0b2dnbGVEcm9wZG93bigpOiB2b2lkO1xuICAgIG9wZW5Ecm9wZG93bigpOiB2b2lkO1xuICAgIGNsb3NlRHJvcGRvd24oZm9jdXM/OiBib29sZWFuKTogdm9pZDtcbiAgICAvKiogU2VsZWN0LiAqKi9cbiAgICBzZWxlY3RPcHRpb24ob3B0aW9uOiBPcHRpb24pOiB2b2lkO1xuICAgIGRlc2VsZWN0T3B0aW9uKG9wdGlvbjogT3B0aW9uKTogdm9pZDtcbiAgICBjbGVhclNlbGVjdGlvbigpOiB2b2lkO1xuICAgIHRvZ2dsZVNlbGVjdE9wdGlvbihvcHRpb246IE9wdGlvbik6IHZvaWQ7XG4gICAgc2VsZWN0SGlnaGxpZ2h0ZWRPcHRpb24oKTogdm9pZDtcbiAgICBkZXNlbGVjdExhc3QoKTogdm9pZDtcbiAgICBvblNlbGVjdEFsbChpc1NlbGVjdGVkOiBib29sZWFuKTogdm9pZDtcbiAgICAvKiogRmlsdGVyLiAqKi9cbiAgICBjbGVhckZpbHRlcklucHV0KCk6IHZvaWQ7XG4gICAgc2V0TXVsdGlwbGVGaWx0ZXJJbnB1dCh2YWx1ZTogc3RyaW5nKTogdm9pZDtcbiAgICBoYW5kbGVTZWxlY3RDb250YWluZXJLZXlkb3duKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGhhbmRsZU11bHRpcGxlRmlsdGVyS2V5ZG93bihldmVudDogYW55KTogdm9pZDtcbiAgICBoYW5kbGVTaW5nbGVGaWx0ZXJLZXlkb3duKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKiBWaWV3LiAqKi9cbiAgICBmb2N1cygpOiB2b2lkO1xuICAgIGJsdXIoKTogdm9pZDtcbiAgICB1cGRhdGVXaWR0aCgpOiB2b2lkO1xuICAgIHVwZGF0ZVBvc2l0aW9uKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfdXBkYXRlQXBwZW5kZWRQb3NpdGlvbjtcbiAgICBwcml2YXRlIF9hcHBlbmREcm9wZG93bjtcbiAgICB1cGRhdGVGaWx0ZXJXaWR0aCgpOiB2b2lkO1xufVxuIl19