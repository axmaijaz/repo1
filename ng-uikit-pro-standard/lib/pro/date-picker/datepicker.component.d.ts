import { IMyLocales } from './interfaces/locale.interface';
import { EventEmitter, OnChanges, SimpleChanges, ElementRef, Renderer2, AfterViewInit, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { IMyDate, IMyMonth, IMyWeek, IMyInputFieldChanged, IMyCalendarViewChanged, IMyInputFocusBlur, IMyOptions } from './interfaces/index';
import { LocaleService } from './services/datepickerLocale.service';
import { UtilService } from './services/datepickerUtil.service';
import * as ɵngcc0 from '@angular/core';
export declare const MYDP_VALUE_ACCESSOR: any;
export declare class MDBDatePickerComponent implements OnChanges, ControlValueAccessor, AfterViewInit {
    elem: ElementRef;
    private renderer;
    private localeService;
    private utilService;
    private cdRef;
    private _globalOptions;
    private document;
    tabIndex: any;
    options: any;
    locale: string;
    defaultMonth: string;
    selDate: string;
    label: string;
    placeholder: string;
    selector: number;
    disabled: boolean;
    openOnFocus: boolean;
    outlineInput: boolean;
    inline: boolean;
    inlineIcon: string;
    id: string;
    private _id;
    dateChanged: EventEmitter<any>;
    inputFieldChanged: EventEmitter<IMyInputFieldChanged>;
    calendarViewChanged: EventEmitter<IMyCalendarViewChanged>;
    calendarToggle: EventEmitter<number>;
    inputFocusBlur: EventEmitter<IMyInputFocusBlur>;
    closeButtonClicked: EventEmitter<MDBDatePickerComponent>;
    clearButtonClicked: EventEmitter<MDBDatePickerComponent>;
    todayButtonClicked: EventEmitter<MDBDatePickerComponent>;
    divFocus: any;
    inlineInput: any;
    inlineIconToggle: any;
    pickerFrame: ElementRef;
    isDateSelected: boolean;
    labelActive: boolean;
    showSelector: boolean;
    visibleMonth: IMyMonth;
    selectedMonth: IMyMonth;
    selectedDate: IMyDate;
    weekDays: Array<string>;
    dates: Array<IMyWeek>;
    selectionDayTxt: string;
    invalidDate: boolean;
    disableTodayBtn: boolean;
    dayIdx: number;
    weekDayOpts: Array<string>;
    editMonth: boolean;
    invalidMonth: boolean;
    editYear: boolean;
    invalidYear: boolean;
    prevMonthDisabled: boolean;
    nextMonthDisabled: boolean;
    prevYearDisabled: boolean;
    nextYearDisabled: boolean;
    prevMonthId: number;
    currMonthId: number;
    nextMonthId: number;
    private _uid;
    isOpen: boolean;
    isDisabled: boolean;
    tmp: IMyDate;
    opts: any;
    months: any;
    years: any;
    elementNumber: any;
    firstTimeOpenedModal: boolean;
    modalHeightBefore: any;
    isMobile: any;
    isBrowser: any;
    documentClickFun: Function;
    constructor(elem: ElementRef, renderer: Renderer2, localeService: LocaleService, utilService: UtilService, cdRef: ChangeDetectorRef, _globalOptions: IMyOptions, document: any, platformId: string);
    ngAfterViewInit(): void;
    ChangeZIndex(): void;
    onChangeCb: (_: any) => void;
    onTouchedCb: () => void;
    setDisabledState(isDisabled: boolean): void;
    setDisabled(isDisabled: boolean): void;
    removeInlineStyle(): void;
    setLocaleOptions(): void;
    addLocale(locale: IMyLocales): void;
    setOptions(): void;
    resetMonthYearEdit(): void;
    onUserDateInput(value: string): void;
    onFocusInput(event: any): void;
    onBlurInput(event: any): void;
    onUserMonthInput(value: string): void;
    onUserYearInput(value: string): void;
    isTodayDisabled(): void;
    parseOptions(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngOnChanges(changes: SimpleChanges): void;
    hideKeyboard(): void;
    removeBtnClicked(): void;
    closeBtnClicked(): void;
    openBtnClicked(): void;
    setVisibleMonth(): void;
    monthList(): void;
    yearsList(): void;
    prevMonth(event?: any): void;
    nextMonth(event?: any): void;
    prevYear(): void;
    nextYear(): void;
    todayClicked(): void;
    cellClicked(cell: any): void;
    cellKeyDown(event: any, cell: any): void;
    clearDate(): void;
    selectDate(date: IMyDate): void;
    updateDateValue(date: IMyDate, clear: boolean): void;
    getDateModel(date: IMyDate): any;
    preZero(val: string): string;
    formatDate(val: any): string;
    monthText(m: number): string;
    weekText(m: string): string;
    getMonthShort(m: number): string;
    getMonthFull(m: number): string;
    monthStartIdx(y: number, m: number): number;
    daysInMonth(m: number, y: number): number;
    daysInPrevMonth(m: number, y: number): number;
    isCurrDay(d: number, m: number, y: number, cmo: number, today: IMyDate): boolean;
    getToday(): IMyDate;
    getTimeInMilliseconds(date: IMyDate): number;
    getWeekday(date: IMyDate): string;
    getDate(year: number, month: number, day: number): Date;
    sundayIdx(): number;
    generateCalendar(m: number, y: number, notifyChange: boolean): void;
    parseSelectedDate(selDate: any): IMyDate;
    parseSelectedMonth(ms: string): IMyMonth;
    setHeaderBtnDisabledState(m: number, y: number): void;
    checkActive(): boolean;
    toggleInlineDatePicker(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MDBDatePickerComponent, [null, null, null, null, null, { optional: true; }, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MDBDatePickerComponent, "mdb-date-picker", ["mdbdatepicker"], { "label": "label"; "placeholder": "placeholder"; "openOnFocus": "openOnFocus"; "outlineInput": "outlineInput"; "inline": "inline"; "inlineIcon": "inlineIcon"; "id": "id"; "disabled": "disabled"; "locale": "locale"; "options": "options"; "tabIndex": "tabIndex"; "defaultMonth": "defaultMonth"; "selDate": "selDate"; "selector": "selector"; }, { "dateChanged": "dateChanged"; "inputFieldChanged": "inputFieldChanged"; "calendarViewChanged": "calendarViewChanged"; "calendarToggle": "calendarToggle"; "inputFocusBlur": "inputFocusBlur"; "closeButtonClicked": "closeButtonClicked"; "clearButtonClicked": "clearButtonClicked"; "todayButtonClicked": "todayButtonClicked"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZGF0ZXBpY2tlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQU1BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVJQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElNeUxvY2FsZXMgfSBmcm9tICcuL2ludGVyZmFjZXMvbG9jYWxlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBJTXlEYXRlLCBJTXlNb250aCwgSU15V2VlaywgSU15SW5wdXRGaWVsZENoYW5nZWQsIElNeUNhbGVuZGFyVmlld0NoYW5nZWQsIElNeUlucHV0Rm9jdXNCbHVyLCBJTXlPcHRpb25zIH0gZnJvbSAnLi9pbnRlcmZhY2VzL2luZGV4JztcbmltcG9ydCB7IExvY2FsZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2RhdGVwaWNrZXJMb2NhbGUuc2VydmljZSc7XG5pbXBvcnQgeyBVdGlsU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvZGF0ZXBpY2tlclV0aWwuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBNWURQX1ZBTFVFX0FDQ0VTU09SOiBhbnk7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNREJEYXRlUGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBDb250cm9sVmFsdWVBY2Nlc3NvciwgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgZWxlbTogRWxlbWVudFJlZjtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgbG9jYWxlU2VydmljZTtcbiAgICBwcml2YXRlIHV0aWxTZXJ2aWNlO1xuICAgIHByaXZhdGUgY2RSZWY7XG4gICAgcHJpdmF0ZSBfZ2xvYmFsT3B0aW9ucztcbiAgICBwcml2YXRlIGRvY3VtZW50O1xuICAgIHRhYkluZGV4OiBhbnk7XG4gICAgb3B0aW9uczogYW55O1xuICAgIGxvY2FsZTogc3RyaW5nO1xuICAgIGRlZmF1bHRNb250aDogc3RyaW5nO1xuICAgIHNlbERhdGU6IHN0cmluZztcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgc2VsZWN0b3I6IG51bWJlcjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBvcGVuT25Gb2N1czogYm9vbGVhbjtcbiAgICBvdXRsaW5lSW5wdXQ6IGJvb2xlYW47XG4gICAgaW5saW5lOiBib29sZWFuO1xuICAgIGlubGluZUljb246IHN0cmluZztcbiAgICBpZDogc3RyaW5nO1xuICAgIHByaXZhdGUgX2lkO1xuICAgIGRhdGVDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBpbnB1dEZpZWxkQ2hhbmdlZDogRXZlbnRFbWl0dGVyPElNeUlucHV0RmllbGRDaGFuZ2VkPjtcbiAgICBjYWxlbmRhclZpZXdDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8SU15Q2FsZW5kYXJWaWV3Q2hhbmdlZD47XG4gICAgY2FsZW5kYXJUb2dnbGU6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIGlucHV0Rm9jdXNCbHVyOiBFdmVudEVtaXR0ZXI8SU15SW5wdXRGb2N1c0JsdXI+O1xuICAgIGNsb3NlQnV0dG9uQ2xpY2tlZDogRXZlbnRFbWl0dGVyPE1EQkRhdGVQaWNrZXJDb21wb25lbnQ+O1xuICAgIGNsZWFyQnV0dG9uQ2xpY2tlZDogRXZlbnRFbWl0dGVyPE1EQkRhdGVQaWNrZXJDb21wb25lbnQ+O1xuICAgIHRvZGF5QnV0dG9uQ2xpY2tlZDogRXZlbnRFbWl0dGVyPE1EQkRhdGVQaWNrZXJDb21wb25lbnQ+O1xuICAgIGRpdkZvY3VzOiBhbnk7XG4gICAgaW5saW5lSW5wdXQ6IGFueTtcbiAgICBpbmxpbmVJY29uVG9nZ2xlOiBhbnk7XG4gICAgcGlja2VyRnJhbWU6IEVsZW1lbnRSZWY7XG4gICAgaXNEYXRlU2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgbGFiZWxBY3RpdmU6IGJvb2xlYW47XG4gICAgc2hvd1NlbGVjdG9yOiBib29sZWFuO1xuICAgIHZpc2libGVNb250aDogSU15TW9udGg7XG4gICAgc2VsZWN0ZWRNb250aDogSU15TW9udGg7XG4gICAgc2VsZWN0ZWREYXRlOiBJTXlEYXRlO1xuICAgIHdlZWtEYXlzOiBBcnJheTxzdHJpbmc+O1xuICAgIGRhdGVzOiBBcnJheTxJTXlXZWVrPjtcbiAgICBzZWxlY3Rpb25EYXlUeHQ6IHN0cmluZztcbiAgICBpbnZhbGlkRGF0ZTogYm9vbGVhbjtcbiAgICBkaXNhYmxlVG9kYXlCdG46IGJvb2xlYW47XG4gICAgZGF5SWR4OiBudW1iZXI7XG4gICAgd2Vla0RheU9wdHM6IEFycmF5PHN0cmluZz47XG4gICAgZWRpdE1vbnRoOiBib29sZWFuO1xuICAgIGludmFsaWRNb250aDogYm9vbGVhbjtcbiAgICBlZGl0WWVhcjogYm9vbGVhbjtcbiAgICBpbnZhbGlkWWVhcjogYm9vbGVhbjtcbiAgICBwcmV2TW9udGhEaXNhYmxlZDogYm9vbGVhbjtcbiAgICBuZXh0TW9udGhEaXNhYmxlZDogYm9vbGVhbjtcbiAgICBwcmV2WWVhckRpc2FibGVkOiBib29sZWFuO1xuICAgIG5leHRZZWFyRGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgcHJldk1vbnRoSWQ6IG51bWJlcjtcbiAgICBjdXJyTW9udGhJZDogbnVtYmVyO1xuICAgIG5leHRNb250aElkOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfdWlkO1xuICAgIGlzT3BlbjogYm9vbGVhbjtcbiAgICBpc0Rpc2FibGVkOiBib29sZWFuO1xuICAgIHRtcDogSU15RGF0ZTtcbiAgICBvcHRzOiBhbnk7XG4gICAgbW9udGhzOiBhbnk7XG4gICAgeWVhcnM6IGFueTtcbiAgICBlbGVtZW50TnVtYmVyOiBhbnk7XG4gICAgZmlyc3RUaW1lT3BlbmVkTW9kYWw6IGJvb2xlYW47XG4gICAgbW9kYWxIZWlnaHRCZWZvcmU6IGFueTtcbiAgICBpc01vYmlsZTogYW55O1xuICAgIGlzQnJvd3NlcjogYW55O1xuICAgIGRvY3VtZW50Q2xpY2tGdW46IEZ1bmN0aW9uO1xuICAgIGNvbnN0cnVjdG9yKGVsZW06IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGxvY2FsZVNlcnZpY2U6IExvY2FsZVNlcnZpY2UsIHV0aWxTZXJ2aWNlOiBVdGlsU2VydmljZSwgY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLCBfZ2xvYmFsT3B0aW9uczogSU15T3B0aW9ucywgZG9jdW1lbnQ6IGFueSwgcGxhdGZvcm1JZDogc3RyaW5nKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBDaGFuZ2VaSW5kZXgoKTogdm9pZDtcbiAgICBvbkNoYW5nZUNiOiAoXzogYW55KSA9PiB2b2lkO1xuICAgIG9uVG91Y2hlZENiOiAoKSA9PiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWQoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgcmVtb3ZlSW5saW5lU3R5bGUoKTogdm9pZDtcbiAgICBzZXRMb2NhbGVPcHRpb25zKCk6IHZvaWQ7XG4gICAgYWRkTG9jYWxlKGxvY2FsZTogSU15TG9jYWxlcyk6IHZvaWQ7XG4gICAgc2V0T3B0aW9ucygpOiB2b2lkO1xuICAgIHJlc2V0TW9udGhZZWFyRWRpdCgpOiB2b2lkO1xuICAgIG9uVXNlckRhdGVJbnB1dCh2YWx1ZTogc3RyaW5nKTogdm9pZDtcbiAgICBvbkZvY3VzSW5wdXQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25CbHVySW5wdXQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25Vc2VyTW9udGhJbnB1dCh2YWx1ZTogc3RyaW5nKTogdm9pZDtcbiAgICBvblVzZXJZZWFySW5wdXQodmFsdWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgaXNUb2RheURpc2FibGVkKCk6IHZvaWQ7XG4gICAgcGFyc2VPcHRpb25zKCk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIGhpZGVLZXlib2FyZCgpOiB2b2lkO1xuICAgIHJlbW92ZUJ0bkNsaWNrZWQoKTogdm9pZDtcbiAgICBjbG9zZUJ0bkNsaWNrZWQoKTogdm9pZDtcbiAgICBvcGVuQnRuQ2xpY2tlZCgpOiB2b2lkO1xuICAgIHNldFZpc2libGVNb250aCgpOiB2b2lkO1xuICAgIG1vbnRoTGlzdCgpOiB2b2lkO1xuICAgIHllYXJzTGlzdCgpOiB2b2lkO1xuICAgIHByZXZNb250aChldmVudD86IGFueSk6IHZvaWQ7XG4gICAgbmV4dE1vbnRoKGV2ZW50PzogYW55KTogdm9pZDtcbiAgICBwcmV2WWVhcigpOiB2b2lkO1xuICAgIG5leHRZZWFyKCk6IHZvaWQ7XG4gICAgdG9kYXlDbGlja2VkKCk6IHZvaWQ7XG4gICAgY2VsbENsaWNrZWQoY2VsbDogYW55KTogdm9pZDtcbiAgICBjZWxsS2V5RG93bihldmVudDogYW55LCBjZWxsOiBhbnkpOiB2b2lkO1xuICAgIGNsZWFyRGF0ZSgpOiB2b2lkO1xuICAgIHNlbGVjdERhdGUoZGF0ZTogSU15RGF0ZSk6IHZvaWQ7XG4gICAgdXBkYXRlRGF0ZVZhbHVlKGRhdGU6IElNeURhdGUsIGNsZWFyOiBib29sZWFuKTogdm9pZDtcbiAgICBnZXREYXRlTW9kZWwoZGF0ZTogSU15RGF0ZSk6IGFueTtcbiAgICBwcmVaZXJvKHZhbDogc3RyaW5nKTogc3RyaW5nO1xuICAgIGZvcm1hdERhdGUodmFsOiBhbnkpOiBzdHJpbmc7XG4gICAgbW9udGhUZXh0KG06IG51bWJlcik6IHN0cmluZztcbiAgICB3ZWVrVGV4dChtOiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgZ2V0TW9udGhTaG9ydChtOiBudW1iZXIpOiBzdHJpbmc7XG4gICAgZ2V0TW9udGhGdWxsKG06IG51bWJlcik6IHN0cmluZztcbiAgICBtb250aFN0YXJ0SWR4KHk6IG51bWJlciwgbTogbnVtYmVyKTogbnVtYmVyO1xuICAgIGRheXNJbk1vbnRoKG06IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyO1xuICAgIGRheXNJblByZXZNb250aChtOiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlcjtcbiAgICBpc0N1cnJEYXkoZDogbnVtYmVyLCBtOiBudW1iZXIsIHk6IG51bWJlciwgY21vOiBudW1iZXIsIHRvZGF5OiBJTXlEYXRlKTogYm9vbGVhbjtcbiAgICBnZXRUb2RheSgpOiBJTXlEYXRlO1xuICAgIGdldFRpbWVJbk1pbGxpc2Vjb25kcyhkYXRlOiBJTXlEYXRlKTogbnVtYmVyO1xuICAgIGdldFdlZWtkYXkoZGF0ZTogSU15RGF0ZSk6IHN0cmluZztcbiAgICBnZXREYXRlKHllYXI6IG51bWJlciwgbW9udGg6IG51bWJlciwgZGF5OiBudW1iZXIpOiBEYXRlO1xuICAgIHN1bmRheUlkeCgpOiBudW1iZXI7XG4gICAgZ2VuZXJhdGVDYWxlbmRhcihtOiBudW1iZXIsIHk6IG51bWJlciwgbm90aWZ5Q2hhbmdlOiBib29sZWFuKTogdm9pZDtcbiAgICBwYXJzZVNlbGVjdGVkRGF0ZShzZWxEYXRlOiBhbnkpOiBJTXlEYXRlO1xuICAgIHBhcnNlU2VsZWN0ZWRNb250aChtczogc3RyaW5nKTogSU15TW9udGg7XG4gICAgc2V0SGVhZGVyQnRuRGlzYWJsZWRTdGF0ZShtOiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQ7XG4gICAgY2hlY2tBY3RpdmUoKTogYm9vbGVhbjtcbiAgICB0b2dnbGVJbmxpbmVEYXRlUGlja2VyKCk6IHZvaWQ7XG59XG4iXX0=